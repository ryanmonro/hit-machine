{"version":3,"sources":["verb.js","mood.js","idiom.js","drunkenness.js","chordSequence.js","Song.js","HitMachine.js","App.js","serviceWorker.js","index.js"],"names":["verb","verbs","Math","floor","random","length","present","mood","moods","output","push","splice","join","idiom","idioms","drunkenness","states_of_drunkenness","chordSequence","progressions","split","chance","Chance","capitalize","require","Sentencer","key","randomElement","capitalise","string","words","arr","Song","this","artist","allowFeat","a","word","first","animal","name","prefix","make","title","tempo","integer","min","max","toLowerCase","minor","guitar","keys","bass","drums","minorness","Key","minorKey","majorKey","buildSong","map","degree","index","parseInt","note","scale","chords","verse","newChordSequence","chorus","middle","chorusComment","weighted","tree","0.25","0.1","0.4","1","comment","0.7","0.3","0.6","section","structure","newSection","console","log","Object","values","parseFloat","value","tonic","type","HitMachine","props","randomise","bind","state","song","document","setState","text","className","details","detail","idx","style","fontWeight","chord","Button","variant","onClick","color","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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OACX,KAAQ,UAER,CACA,QAAW,QACX,KAAQ,WAER,CACA,QAAW,OACX,KAAQ,WAER,CACA,QAAW,QACX,KAAQ,WAER,CACA,QAAW,UACX,KAAQ,YAER,CACA,QAAW,UACX,KAAQ,YAER,CACA,QAAW,QACX,KAAQ,WAER,CACA,QAAW,OACX,KAAQ,UAER,CACA,QAAW,OACX,KAAQ,UAER,CACA,QAAW,MACX,KAAQ,UAER,CACA,QAAW,OACX,KAAQ,WAGV,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,SAASC,SCp1E1CC,MAhJf,WACE,IAAIC,EAAQ,CACV,WACA,eACA,aACA,QACA,SACA,QACA,UACA,UACA,YACA,aACA,UACA,QACA,aACA,SACA,cACA,OACA,QACA,WACA,QACA,SACA,WACA,OACA,WACA,UACA,WACA,UACA,UACA,OACA,aACA,WACA,UACA,SACA,SACA,QACA,UACA,UACA,UACA,OACA,YACA,aACA,WACA,YACA,aACA,UACA,QACA,eACA,aACA,QACA,QACA,UACA,QACA,WACA,YACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,SACA,YACA,aACA,OACA,QACA,QACA,SACA,SACA,OACA,WACA,SACA,SACA,SACA,QACA,cACA,OACA,UACA,MACA,SACA,QACA,YACA,gBACA,cACA,aACA,QACA,YACA,UACA,SACA,WACA,OACA,YACA,WACA,SACA,QACA,MACA,aACA,SACA,cACA,QACA,SACA,UACA,QACA,OACA,OACA,aACA,WACA,cACA,aACA,UACA,YACA,WACA,YACA,YACA,YACA,WACA,cACA,UACA,WACA,WACA,SACA,MACA,YACA,UACA,OACA,QACA,SACA,QACA,WACA,YACA,cACA,WACA,QACA,UACA,gBACA,SAEEC,EAAS,GAGb,OAFAA,EAAOC,KAAKF,EAAMG,OAAOT,KAAKC,MAAMD,KAAKE,SAAWI,EAAMH,QAAS,IACnEI,EAAOC,KAAKF,EAAMG,OAAOT,KAAKC,MAAMD,KAAKE,SAAWI,EAAMH,QAAS,IAC5DI,EAAOG,KAAK,OCzINC,MALf,WA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","file":"static/js/main.f07112d4.chunk.js","sourcesContent":["function verb() {\n  var verbs = [\n    {\n    \"present\": \"accept\",\n    \"past\": \"accepted\"\n    },\n    {\n    \"present\": \"add\",\n    \"past\": \"added\"\n    },\n    {\n    \"present\": \"admire\",\n    \"past\": \"admired\"\n    },\n    {\n    \"present\": \"admit\",\n    \"past\": \"admitted\"\n    },\n    {\n    \"present\": \"advise\",\n    \"past\": \"advised\"\n    },\n    {\n    \"present\": \"afford\",\n    \"past\": \"afforded\"\n    },\n    {\n    \"present\": \"agree\",\n    \"past\": \"agreed\"\n    },\n    {\n    \"present\": \"alert\",\n    \"past\": \"alerted\"\n    },\n    {\n    \"present\": \"allow\",\n    \"past\": \"allowed\"\n    },\n    {\n    \"present\": \"amuse\",\n    \"past\": \"amused\"\n    },\n    {\n    \"present\": \"analyse\",\n    \"past\": \"analysed\"\n    },\n    {\n    \"present\": \"announce\",\n    \"past\": \"announced\"\n    },\n    {\n    \"present\": \"annoy\",\n    \"past\": \"annoyed\"\n    },\n    {\n    \"present\": \"answer\",\n    \"past\": \"answered\"\n    },\n    {\n    \"present\": \"apologise\",\n    \"past\": \"apologised\"\n    },\n    {\n    \"present\": \"appear\",\n    \"past\": \"appeared\"\n    },\n    {\n    \"present\": \"applaud\",\n    \"past\": \"applauded\"\n    },\n    {\n    \"present\": \"appreciate\",\n    \"past\": \"appreciated\"\n    },\n    {\n    \"present\": \"approve\",\n    \"past\": \"approved\"\n    },\n    {\n    \"present\": \"argue\",\n    \"past\": \"argued\"\n    },\n    {\n    \"present\": \"arrange\",\n    \"past\": \"arranged\"\n    },\n    {\n    \"present\": \"arrest\",\n    \"past\": \"arrested\"\n    },\n    {\n    \"present\": \"arrive\",\n    \"past\": \"arrived\"\n    },\n    {\n    \"present\": \"ask\",\n    \"past\": \"asked\"\n    },\n    {\n    \"present\": \"attach\",\n    \"past\": \"attached\"\n    },\n    {\n    \"present\": \"attack\",\n    \"past\": \"attacked\"\n    },\n    {\n    \"present\": \"attempt\",\n    \"past\": \"attempted\"\n    },\n    {\n    \"present\": \"attend\",\n    \"past\": \"attended\"\n    },\n    {\n    \"present\": \"attract\",\n    \"past\": \"attracted\"\n    },\n    {\n    \"present\": \"avoid\",\n    \"past\": \"avoided\"\n    },\n    {\n    \"present\": \"back\",\n    \"past\": \"backed\"\n    },\n    {\n    \"present\": \"bake\",\n    \"past\": \"baked\"\n    },\n    {\n    \"present\": \"balance\",\n    \"past\": \"balanced\"\n    },\n    {\n    \"present\": \"ban\",\n    \"past\": \"banned\"\n    },\n    {\n    \"present\": \"bang\",\n    \"past\": \"banged\"\n    },\n    {\n    \"present\": \"bare\",\n    \"past\": \"bared\"\n    },\n    {\n    \"present\": \"bat\",\n    \"past\": \"batted\"\n    },\n    {\n    \"present\": \"bathe\",\n    \"past\": \"bathed\"\n    },\n    {\n    \"present\": \"battle\",\n    \"past\": \"battled\"\n    },\n    {\n    \"present\": \"beam\",\n    \"past\": \"beamed\"\n    },\n    {\n    \"present\": \"beg\",\n    \"past\": \"begged\"\n    },\n    {\n    \"present\": \"behave\",\n    \"past\": \"behaved\"\n    },\n    {\n    \"present\": \"belong\",\n    \"past\": \"belonged\"\n    },\n    {\n    \"present\": \"bleach\",\n    \"past\": \"bleached\"\n    },\n    {\n    \"present\": \"bless\",\n    \"past\": \"blessed\"\n    },\n    {\n    \"present\": \"blind\",\n    \"past\": \"blinded\"\n    },\n    {\n    \"present\": \"blink\",\n    \"past\": \"blinked\"\n    },\n    {\n    \"present\": \"blot\",\n    \"past\": \"blotted\"\n    },\n    {\n    \"present\": \"blush\",\n    \"past\": \"blushed\"\n    },\n    {\n    \"present\": \"boast\",\n    \"past\": \"boasted\"\n    },\n    {\n    \"present\": \"boil\",\n    \"past\": \"boiled\"\n    },\n    {\n    \"present\": \"bolt\",\n    \"past\": \"bolted\"\n    },\n    {\n    \"present\": \"bomb\",\n    \"past\": \"bombed\"\n    },\n    {\n    \"present\": \"book\",\n    \"past\": \"booked\"\n    },\n    {\n    \"present\": \"bore\",\n    \"past\": \"bored\"\n    },\n    {\n    \"present\": \"borrow\",\n    \"past\": \"borrowed\"\n    },\n    {\n    \"present\": \"bounce\",\n    \"past\": \"bounced\"\n    },\n    {\n    \"present\": \"bow\",\n    \"past\": \"bowed\"\n    },\n    {\n    \"present\": \"box\",\n    \"past\": \"boxed\"\n    },\n    {\n    \"present\": \"brake\",\n    \"past\": \"braked\"\n    },\n    {\n    \"present\": \"branch\",\n    \"past\": \"branched\"\n    },\n    {\n    \"present\": \"breathe\",\n    \"past\": \"breathed\"\n    },\n    {\n    \"present\": \"bruise\",\n    \"past\": \"bruised\"\n    },\n    {\n    \"present\": \"brush\",\n    \"past\": \"brushed\"\n    },\n    {\n    \"present\": \"bubble\",\n    \"past\": \"bubbled\"\n    },\n    {\n    \"present\": \"bump\",\n    \"past\": \"bumped\"\n    },\n    {\n    \"present\": \"burn\",\n    \"past\": \"burned\"\n    },\n    {\n    \"present\": \"bury\",\n    \"past\": \"buried\"\n    },\n    {\n    \"present\": \"buzz\",\n    \"past\": \"buzzed\"\n    },\n    {\n    \"present\": \"calculate\",\n    \"past\": \"calculated\"\n    },\n    {\n    \"present\": \"call\",\n    \"past\": \"called\"\n    },\n    {\n    \"present\": \"camp\",\n    \"past\": \"camped\"\n    },\n    {\n    \"present\": \"care\",\n    \"past\": \"cared\"\n    },\n    {\n    \"present\": \"carry\",\n    \"past\": \"carried\"\n    },\n    {\n    \"present\": \"carve\",\n    \"past\": \"carved\"\n    },\n    {\n    \"present\": \"cause\",\n    \"past\": \"caused\"\n    },\n    {\n    \"present\": \"challenge\",\n    \"past\": \"challenged\"\n    },\n    {\n    \"present\": \"change\",\n    \"past\": \"changed\"\n    },\n    {\n    \"present\": \"charge\",\n    \"past\": \"charged\"\n    },\n    {\n    \"present\": \"chase\",\n    \"past\": \"chased\"\n    },\n    {\n    \"present\": \"cheat\",\n    \"past\": \"cheated\"\n    },\n    {\n    \"present\": \"check\",\n    \"past\": \"checked\"\n    },\n    {\n    \"present\": \"cheer\",\n    \"past\": \"cheered\"\n    },\n    {\n    \"present\": \"chew\",\n    \"past\": \"chewed\"\n    },\n    {\n    \"present\": \"choke\",\n    \"past\": \"choked\"\n    },\n    {\n    \"present\": \"chop\",\n    \"past\": \"chopped\"\n    },\n    {\n    \"present\": \"claim\",\n    \"past\": \"claimed\"\n    },\n    {\n    \"present\": \"clap\",\n    \"past\": \"clapped\"\n    },\n    {\n    \"present\": \"clean\",\n    \"past\": \"cleaned\"\n    },\n    {\n    \"present\": \"clear\",\n    \"past\": \"cleared\"\n    },\n    {\n    \"present\": \"clip\",\n    \"past\": \"clipped\"\n    },\n    {\n    \"present\": \"close\",\n    \"past\": \"closed\"\n    },\n    {\n    \"present\": \"coach\",\n    \"past\": \"coached\"\n    },\n    {\n    \"present\": \"coil\",\n    \"past\": \"coiled\"\n    },\n    {\n    \"present\": \"collect\",\n    \"past\": \"collected\"\n    },\n    {\n    \"present\": \"colour\",\n    \"past\": \"coloured\"\n    },\n    {\n    \"present\": \"comb\",\n    \"past\": \"combed\"\n    },\n    {\n    \"present\": \"command\",\n    \"past\": \"commanded\"\n    },\n    {\n    \"present\": \"communicate\",\n    \"past\": \"communicated\"\n    },\n    {\n    \"present\": \"compare\",\n    \"past\": \"compared\"\n    },\n    {\n    \"present\": \"compete\",\n    \"past\": \"competed\"\n    },\n    {\n    \"present\": \"complain\",\n    \"past\": \"complained\"\n    },\n    {\n    \"present\": \"complete\",\n    \"past\": \"completed\"\n    },\n    {\n    \"present\": \"concentrate\",\n    \"past\": \"concentrated\"\n    },\n    {\n    \"present\": \"concern\",\n    \"past\": \"concerned\"\n    },\n    {\n    \"present\": \"confess\",\n    \"past\": \"confessed\"\n    },\n    {\n    \"present\": \"confuse\",\n    \"past\": \"confused\"\n    },\n    {\n    \"present\": \"connect\",\n    \"past\": \"connected\"\n    },\n    {\n    \"present\": \"consider\",\n    \"past\": \"considered\"\n    },\n    {\n    \"present\": \"consist\",\n    \"past\": \"consisted\"\n    },\n    {\n    \"present\": \"contain\",\n    \"past\": \"contained\"\n    },\n    {\n    \"present\": \"continue\",\n    \"past\": \"continued\"\n    },\n    {\n    \"present\": \"copy\",\n    \"past\": \"copied\"\n    },\n    {\n    \"present\": \"correct\",\n    \"past\": \"corrected\"\n    },\n    {\n    \"present\": \"cough\",\n    \"past\": \"coughed\"\n    },\n    {\n    \"present\": \"count\",\n    \"past\": \"counted\"\n    },\n    {\n    \"present\": \"cover\",\n    \"past\": \"covered\"\n    },\n    {\n    \"present\": \"crack\",\n    \"past\": \"cracked\"\n    },\n    {\n    \"present\": \"crash\",\n    \"past\": \"crashed\"\n    },\n    {\n    \"present\": \"crawl\",\n    \"past\": \"crawled\"\n    },\n    {\n    \"present\": \"cross\",\n    \"past\": \"crossed\"\n    },\n    {\n    \"present\": \"crush\",\n    \"past\": \"crushed\"\n    },\n    {\n    \"present\": \"cry\",\n    \"past\": \"cried\"\n    },\n    {\n    \"present\": \"cure\",\n    \"past\": \"cured\"\n    },\n    {\n    \"present\": \"curl\",\n    \"past\": \"curled\"\n    },\n    {\n    \"present\": \"curve\",\n    \"past\": \"curved\"\n    },\n    {\n    \"present\": \"cycle\",\n    \"past\": \"cycled\"\n    },\n    {\n    \"present\": \"dam\",\n    \"past\": \"dammed\"\n    },\n    {\n    \"present\": \"damage\",\n    \"past\": \"damaged\"\n    },\n    {\n    \"present\": \"dance\",\n    \"past\": \"danced\"\n    },\n    {\n    \"present\": \"dare\",\n    \"past\": \"dared\"\n    },\n    {\n    \"present\": \"decay\",\n    \"past\": \"decayed\"\n    },\n    {\n    \"present\": \"deceive\",\n    \"past\": \"deceived\"\n    },\n    {\n    \"present\": \"decide\",\n    \"past\": \"decided\"\n    },\n    {\n    \"present\": \"decorate\",\n    \"past\": \"decorated\"\n    },\n    {\n    \"present\": \"delay\",\n    \"past\": \"delayed\"\n    },\n    {\n    \"present\": \"delight\",\n    \"past\": \"delighted\"\n    },\n    {\n    \"present\": \"deliver\",\n    \"past\": \"delivered\"\n    },\n    {\n    \"present\": \"depend\",\n    \"past\": \"depended\"\n    },\n    {\n    \"present\": \"describe\",\n    \"past\": \"described\"\n    },\n    {\n    \"present\": \"desert\",\n    \"past\": \"deserted\"\n    },\n    {\n    \"present\": \"deserve\",\n    \"past\": \"deserved\"\n    },\n    {\n    \"present\": \"destroy\",\n    \"past\": \"destroyed\"\n    },\n    {\n    \"present\": \"detect\",\n    \"past\": \"detected\"\n    },\n    {\n    \"present\": \"develop\",\n    \"past\": \"developed\"\n    },\n    {\n    \"present\": \"disagree\",\n    \"past\": \"disagreed\"\n    },\n    {\n    \"present\": \"disappear\",\n    \"past\": \"disappeared\"\n    },\n    {\n    \"present\": \"disapprove\",\n    \"past\": \"disapproved\"\n    },\n    {\n    \"present\": \"disarm\",\n    \"past\": \"disarmed\"\n    },\n    {\n    \"present\": \"discover\",\n    \"past\": \"discovered\"\n    },\n    {\n    \"present\": \"dislike\",\n    \"past\": \"disliked\"\n    },\n    {\n    \"present\": \"divide\",\n    \"past\": \"divided\"\n    },\n    {\n    \"present\": \"double\",\n    \"past\": \"doubled\"\n    },\n    {\n    \"present\": \"doubt\",\n    \"past\": \"doubted\"\n    },\n    {\n    \"present\": \"drag\",\n    \"past\": \"dragged\"\n    },\n    {\n    \"present\": \"drain\",\n    \"past\": \"drained\"\n    },\n    {\n    \"present\": \"dream\",\n    \"past\": \"dreamed\"\n    },\n    {\n    \"present\": \"dress\",\n    \"past\": \"dressed\"\n    },\n    {\n    \"present\": \"drip\",\n    \"past\": \"dripped\"\n    },\n    {\n    \"present\": \"drop\",\n    \"past\": \"dropped\"\n    },\n    {\n    \"present\": \"drown\",\n    \"past\": \"drowned\"\n    },\n    {\n    \"present\": \"drum\",\n    \"past\": \"drummed\"\n    },\n    {\n    \"present\": \"dry\",\n    \"past\": \"dried\"\n    },\n    {\n    \"present\": \"dust\",\n    \"past\": \"dusted\"\n    },\n    {\n    \"present\": \"earn\",\n    \"past\": \"earned\"\n    },\n    {\n    \"present\": \"educate\",\n    \"past\": \"educated\"\n    },\n    {\n    \"present\": \"embarrass\",\n    \"past\": \"embarrassed\"\n    },\n    {\n    \"present\": \"employ\",\n    \"past\": \"employed\"\n    },\n    {\n    \"present\": \"empty\",\n    \"past\": \"emptied\"\n    },\n    {\n    \"present\": \"encourage\",\n    \"past\": \"encouraged\"\n    },\n    {\n    \"present\": \"end\",\n    \"past\": \"ended\"\n    },\n    {\n    \"present\": \"enjoy\",\n    \"past\": \"enjoyed\"\n    },\n    {\n    \"present\": \"enter\",\n    \"past\": \"entered\"\n    },\n    {\n    \"present\": \"entertain\",\n    \"past\": \"entertained\"\n    },\n    {\n    \"present\": \"escape\",\n    \"past\": \"escaped\"\n    },\n    {\n    \"present\": \"examine\",\n    \"past\": \"examined\"\n    },\n    {\n    \"present\": \"excite\",\n    \"past\": \"excited\"\n    },\n    {\n    \"present\": \"excuse\",\n    \"past\": \"excused\"\n    },\n    {\n    \"present\": \"exercise\",\n    \"past\": \"exercised\"\n    },\n    {\n    \"present\": \"exist\",\n    \"past\": \"existed\"\n    },\n    {\n    \"present\": \"expand\",\n    \"past\": \"expand\"\n    },\n    {\n    \"present\": \"expect\",\n    \"past\": \"expected\"\n    },\n    {\n    \"present\": \"explain\",\n    \"past\": \"explained\"\n    },\n    {\n    \"present\": \"explode\",\n    \"past\": \"exploded\"\n    },\n    {\n    \"present\": \"extend\",\n    \"past\": \"extended\"\n    },\n    {\n    \"present\": \"face\",\n    \"past\": \"faced\"\n    },\n    {\n    \"present\": \"fade\",\n    \"past\": \"faded\"\n    },\n    {\n    \"present\": \"fail\",\n    \"past\": \"failed\"\n    },\n    {\n    \"present\": \"fancy\",\n    \"past\": \"fancied\"\n    },\n    {\n    \"present\": \"fasten\",\n    \"past\": \"fastened\"\n    },\n    {\n    \"present\": \"fax\",\n    \"past\": \"faxed\"\n    },\n    {\n    \"present\": \"fear\",\n    \"past\": \"feared\"\n    },\n    {\n    \"present\": \"fence\",\n    \"past\": \"fenced\"\n    },\n    {\n    \"present\": \"fetch\",\n    \"past\": \"fetched\"\n    },\n    {\n    \"present\": \"file\",\n    \"past\": \"filed\"\n    },\n    {\n    \"present\": \"fill\",\n    \"past\": \"filled\"\n    },\n    {\n    \"present\": \"film\",\n    \"past\": \"filmed\"\n    },\n    {\n    \"present\": \"fire\",\n    \"past\": \"fired\"\n    },\n    {\n    \"present\": \"fit\",\n    \"past\": \"fitted\"\n    },\n    {\n    \"present\": \"fix\",\n    \"past\": \"fixed\"\n    },\n    {\n    \"present\": \"flap\",\n    \"past\": \"flapped\"\n    },\n    {\n    \"present\": \"flash\",\n    \"past\": \"flashed\"\n    },\n    {\n    \"present\": \"float\",\n    \"past\": \"floated\"\n    },\n    {\n    \"present\": \"flood\",\n    \"past\": \"flooded\"\n    },\n    {\n    \"present\": \"flow\",\n    \"past\": \"flowed\"\n    },\n    {\n    \"present\": \"flower\",\n    \"past\": \"flowered\"\n    },\n    {\n    \"present\": \"fold\",\n    \"past\": \"folded\"\n    },\n    {\n    \"present\": \"follow\",\n    \"past\": \"followed\"\n    },\n    {\n    \"present\": \"fool\",\n    \"past\": \"fooled\"\n    },\n    {\n    \"present\": \"force\",\n    \"past\": \"forced\"\n    },\n    {\n    \"present\": \"form\",\n    \"past\": \"formed\"\n    },\n    {\n    \"present\": \"found\",\n    \"past\": \"founded\"\n    },\n    {\n    \"present\": \"frame\",\n    \"past\": \"framed\"\n    },\n    {\n    \"present\": \"frighten\",\n    \"past\": \"frightened\"\n    },\n    {\n    \"present\": \"fry\",\n    \"past\": \"fried\"\n    },\n    {\n    \"present\": \"gather\",\n    \"past\": \"gathered\"\n    },\n    {\n    \"present\": \"gaze\",\n    \"past\": \"gazed\"\n    },\n    {\n    \"present\": \"glow\",\n    \"past\": \"glowed\"\n    },\n    {\n    \"present\": \"glue\",\n    \"past\": \"glued\"\n    },\n    {\n    \"present\": \"grab\",\n    \"past\": \"grabbed\"\n    },\n    {\n    \"present\": \"grate\",\n    \"past\": \"grated\"\n    },\n    {\n    \"present\": \"grease\",\n    \"past\": \"greased\"\n    },\n    {\n    \"present\": \"greet\",\n    \"past\": \"greeted\"\n    },\n    {\n    \"present\": \"grin\",\n    \"past\": \"grinned\"\n    },\n    {\n    \"present\": \"grip\",\n    \"past\": \"gripped\"\n    },\n    {\n    \"present\": \"groan\",\n    \"past\": \"groaned\"\n    },\n    {\n    \"present\": \"guarantee\",\n    \"past\": \"guaranteed\"\n    },\n    {\n    \"present\": \"guard\",\n    \"past\": \"guarded\"\n    },\n    {\n    \"present\": \"guess\",\n    \"past\": \"guessed\"\n    },\n    {\n    \"present\": \"guide\",\n    \"past\": \"guided\"\n    },\n    {\n    \"present\": \"hammer\",\n    \"past\": \"hammered\"\n    },\n    {\n    \"present\": \"hand\",\n    \"past\": \"handed\"\n    },\n    {\n    \"present\": \"handle\",\n    \"past\": \"handled\"\n    },\n    {\n    \"present\": \"hang\",\n    \"past\": \"hung\"\n    },\n    {\n    \"present\": \"happen\",\n    \"past\": \"happened\"\n    },\n    {\n    \"present\": \"harass\",\n    \"past\": \"harassed\"\n    },\n    {\n    \"present\": \"harm\",\n    \"past\": \"harmed\"\n    },\n    {\n    \"present\": \"hate\",\n    \"past\": \"hated\"\n    },\n    {\n    \"present\": \"haunt\",\n    \"past\": \"haunted\"\n    },\n    {\n    \"present\": \"head\",\n    \"past\": \"headed\"\n    },\n    {\n    \"present\": \"heal\",\n    \"past\": \"healed\"\n    },\n    {\n    \"present\": \"heap\",\n    \"past\": \"heaped\"\n    },\n    {\n    \"present\": \"heat\",\n    \"past\": \"heated\"\n    },\n    {\n    \"present\": \"help\",\n    \"past\": \"helped\"\n    },\n    {\n    \"present\": \"hook\",\n    \"past\": \"hooked\"\n    },\n    {\n    \"present\": \"hop\",\n    \"past\": \"hopped\"\n    },\n    {\n    \"present\": \"hope\",\n    \"past\": \"hoped\"\n    },\n    {\n    \"present\": \"hover\",\n    \"past\": \"hovered\"\n    },\n    {\n    \"present\": \"hug\",\n    \"past\": \"hugged\"\n    },\n    {\n    \"present\": \"hum\",\n    \"past\": \"hummed\"\n    },\n    {\n    \"present\": \"hunt\",\n    \"past\": \"hunted\"\n    },\n    {\n    \"present\": \"hurry\",\n    \"past\": \"hurried\"\n    },\n    {\n    \"present\": \"identify\",\n    \"past\": \"identified\"\n    },\n    {\n    \"present\": \"ignore\",\n    \"past\": \"ignored\"\n    },\n    {\n    \"present\": \"imagine\",\n    \"past\": \"imagined\"\n    },\n    {\n    \"present\": \"impress\",\n    \"past\": \"impressed\"\n    },\n    {\n    \"present\": \"improve\",\n    \"past\": \"improved\"\n    },\n    {\n    \"present\": \"include\",\n    \"past\": \"included\"\n    },\n    {\n    \"present\": \"increase\",\n    \"past\": \"increased\"\n    },\n    {\n    \"present\": \"influence\",\n    \"past\": \"influenced\"\n    },\n    {\n    \"present\": \"inform\",\n    \"past\": \"informed\"\n    },\n    {\n    \"present\": \"inject\",\n    \"past\": \"injected\"\n    },\n    {\n    \"present\": \"injure\",\n    \"past\": \"injured\"\n    },\n    {\n    \"present\": \"instruct\",\n    \"past\": \"instructed\"\n    },\n    {\n    \"present\": \"intend\",\n    \"past\": \"intended\"\n    },\n    {\n    \"present\": \"interest\",\n    \"past\": \"interested\"\n    },\n    {\n    \"present\": \"interfere\",\n    \"past\": \"interfered\"\n    },\n    {\n    \"present\": \"interrupt\",\n    \"past\": \"interrupted\"\n    },\n    {\n    \"present\": \"introduce\",\n    \"past\": \"introduced\"\n    },\n    {\n    \"present\": \"invent\",\n    \"past\": \"invented\"\n    },\n    {\n    \"present\": \"invite\",\n    \"past\": \"invited\"\n    },\n    {\n    \"present\": \"irritate\",\n    \"past\": \"irritated\"\n    },\n    {\n    \"present\": \"itch\",\n    \"past\": \"itched\"\n    },\n    {\n    \"present\": \"jail\",\n    \"past\": \"jailed\"\n    },\n    {\n    \"present\": \"jam\",\n    \"past\": \"jammed\"\n    },\n    {\n    \"present\": \"jog\",\n    \"past\": \"jogged\"\n    },\n    {\n    \"present\": \"join\",\n    \"past\": \"joined\"\n    },\n    {\n    \"present\": \"joke\",\n    \"past\": \"joked\"\n    },\n    {\n    \"present\": \"judge\",\n    \"past\": \"judged\"\n    },\n    {\n    \"present\": \"juggle\",\n    \"past\": \"juggled\"\n    },\n    {\n    \"present\": \"jump\",\n    \"past\": \"jumped\"\n    },\n    {\n    \"present\": \"kick\",\n    \"past\": \"kicked\"\n    },\n    {\n    \"present\": \"kill\",\n    \"past\": \"killed\"\n    },\n    {\n    \"present\": \"kiss\",\n    \"past\": \"kissed\"\n    },\n    {\n    \"present\": \"kneel\",\n    \"past\": \"knelt\"\n    },\n    {\n    \"present\": \"knit\",\n    \"past\": \"knitted\"\n    },\n    {\n    \"present\": \"knock\",\n    \"past\": \"knocked\"\n    },\n    {\n    \"present\": \"knot\",\n    \"past\": \"knotted\"\n    },\n    {\n    \"present\": \"label\",\n    \"past\": \"labelled\"\n    },\n    {\n    \"present\": \"land\",\n    \"past\": \"landed\"\n    },\n    {\n    \"present\": \"last\",\n    \"past\": \"lasted\"\n    },\n    {\n    \"present\": \"laugh\",\n    \"past\": \"laughed\"\n    },\n    {\n    \"present\": \"launch\",\n    \"past\": \"launched\"\n    },\n    {\n    \"present\": \"learn\",\n    \"past\": \"learned\"\n    },\n    {\n    \"present\": \"level\",\n    \"past\": \"levelled\"\n    },\n    {\n    \"present\": \"license\",\n    \"past\": \"licensed\"\n    },\n    {\n    \"present\": \"lick\",\n    \"past\": \"licked\"\n    },\n    {\n    \"present\": \"lie\",\n    \"past\": \"lied\"\n    },\n    {\n    \"present\": \"lighten\",\n    \"past\": \"lightened\"\n    },\n    {\n    \"present\": \"like\",\n    \"past\": \"liked\"\n    },\n    {\n    \"present\": \"list\",\n    \"past\": \"listed\"\n    },\n    {\n    \"present\": \"listen\",\n    \"past\": \"listened\"\n    },\n    {\n    \"present\": \"live\",\n    \"past\": \"lived\"\n    },\n    {\n    \"present\": \"load\",\n    \"past\": \"loaded\"\n    },\n    {\n    \"present\": \"lock\",\n    \"past\": \"locked\"\n    },\n    {\n    \"present\": \"long\",\n    \"past\": \"longed\"\n    },\n    {\n    \"present\": \"look\",\n    \"past\": \"look\"\n    },\n    {\n    \"present\": \"love\",\n    \"past\": \"loved\"\n    },\n    {\n    \"present\": \"man\",\n    \"past\": \"manned\"\n    },\n    {\n    \"present\": \"manage\",\n    \"past\": \"managed\"\n    },\n    {\n    \"present\": \"march\",\n    \"past\": \"marched\"\n    },\n    {\n    \"present\": \"mark\",\n    \"past\": \"marked\"\n    },\n    {\n    \"present\": \"marry\",\n    \"past\": \"married\"\n    },\n    {\n    \"present\": \"match\",\n    \"past\": \"matched\"\n    },\n    {\n    \"present\": \"mate\",\n    \"past\": \"mated\"\n    },\n    {\n    \"present\": \"matter\",\n    \"past\": \"mattered\"\n    },\n    {\n    \"present\": \"measure\",\n    \"past\": \"measured\"\n    },\n    {\n    \"present\": \"meddle\",\n    \"past\": \"meddled\"\n    },\n    {\n    \"present\": \"melt\",\n    \"past\": \"melted\"\n    },\n    {\n    \"present\": \"memorise\",\n    \"past\": \"memorised\"\n    },\n    {\n    \"present\": \"mend\",\n    \"past\": \"mended\"\n    },\n    {\n    \"present\": \"mess up\",\n    \"past\": \"messed up\"\n    },\n    {\n    \"present\": \"milk\",\n    \"past\": \"milked\"\n    },\n    {\n    \"present\": \"mine\",\n    \"past\": \"mined\"\n    },\n    {\n    \"present\": \"miss\",\n    \"past\": \"missed\"\n    },\n    {\n    \"present\": \"mix\",\n    \"past\": \"mixed\"\n    },\n    {\n    \"present\": \"moan\",\n    \"past\": \"moaned\"\n    },\n    {\n    \"present\": \"moor\",\n    \"past\": \"moored\"\n    },\n    {\n    \"present\": \"mourn\",\n    \"past\": \"mourned\"\n    },\n    {\n    \"present\": \"move\",\n    \"past\": \"moved\"\n    },\n    {\n    \"present\": \"muddle\",\n    \"past\": \"muddled\"\n    },\n    {\n    \"present\": \"mug\",\n    \"past\": \"mugged\"\n    },\n    {\n    \"present\": \"multiply\",\n    \"past\": \"multiplied\"\n    },\n    {\n    \"present\": \"murder\",\n    \"past\": \"murdered\"\n    },\n    {\n    \"present\": \"nail\",\n    \"past\": \"nailed\"\n    },\n    {\n    \"present\": \"name\",\n    \"past\": \"named\"\n    },\n    {\n    \"present\": \"need\",\n    \"past\": \"needed\"\n    },\n    {\n    \"present\": \"nest\",\n    \"past\": \"nested\"\n    },\n    {\n    \"present\": \"nod\",\n    \"past\": \"nodded\"\n    },\n    {\n    \"present\": \"note\",\n    \"past\": \"noted\"\n    },\n    {\n    \"present\": \"notice\",\n    \"past\": \"noticed\"\n    },\n    {\n    \"present\": \"number\",\n    \"past\": \"numbered\"\n    },\n    {\n    \"present\": \"obey\",\n    \"past\": \"obeyed\"\n    },\n    {\n    \"present\": \"object\",\n    \"past\": \"objected\"\n    },\n    {\n    \"present\": \"observe\",\n    \"past\": \"observed\"\n    },\n    {\n    \"present\": \"obtain\",\n    \"past\": \"obtained\"\n    },\n    {\n    \"present\": \"occur\",\n    \"past\": \"occurred\"\n    },\n    {\n    \"present\": \"offend\",\n    \"past\": \"offended\"\n    },\n    {\n    \"present\": \"offer\",\n    \"past\": \"offered\"\n    },\n    {\n    \"present\": \"open\",\n    \"past\": \"opened\"\n    },\n    {\n    \"present\": \"order\",\n    \"past\": \"ordered\"\n    },\n    {\n    \"present\": \"overflow\",\n    \"past\": \"overflowed\"\n    },\n    {\n    \"present\": \"owe\",\n    \"past\": \"owed\"\n    },\n    {\n    \"present\": \"own\",\n    \"past\": \"owned\"\n    },\n    {\n    \"present\": \"pack\",\n    \"past\": \"packed\"\n    },\n    {\n    \"present\": \"paddle\",\n    \"past\": \"paddled\"\n    },\n    {\n    \"present\": \"paint\",\n    \"past\": \"painted\"\n    },\n    {\n    \"present\": \"park\",\n    \"past\": \"parked\"\n    },\n    {\n    \"present\": \"part\",\n    \"past\": \"parted\"\n    },\n    {\n    \"present\": \"pass\",\n    \"past\": \"passed\"\n    },\n    {\n    \"present\": \"paste\",\n    \"past\": \"pasted\"\n    },\n    {\n    \"present\": \"pat\",\n    \"past\": \"patted\"\n    },\n    {\n    \"present\": \"pause\",\n    \"past\": \"paused\"\n    },\n    {\n    \"present\": \"peck\",\n    \"past\": \"pecked\"\n    },\n    {\n    \"present\": \"pedal\",\n    \"past\": \"pedalled\"\n    },\n    {\n    \"present\": \"peel\",\n    \"past\": \"peeled\"\n    },\n    {\n    \"present\": \"peep\",\n    \"past\": \"peeped\"\n    },\n    {\n    \"present\": \"perform\",\n    \"past\": \"performed\"\n    },\n    {\n    \"present\": \"permit\",\n    \"past\": \"permitted\"\n    },\n    {\n    \"present\": \"phone\",\n    \"past\": \"phoned\"\n    },\n    {\n    \"present\": \"pick\",\n    \"past\": \"picked\"\n    },\n    {\n    \"present\": \"pinch\",\n    \"past\": \"pinched\"\n    },\n    {\n    \"present\": \"pine\",\n    \"past\": \"pined\"\n    },\n    {\n    \"present\": \"place\",\n    \"past\": \"placed\"\n    },\n    {\n    \"present\": \"plan\",\n    \"past\": \"planned\"\n    },\n    {\n    \"present\": \"plant\",\n    \"past\": \"planted\"\n    },\n    {\n    \"present\": \"play\",\n    \"past\": \"played\"\n    },\n    {\n    \"present\": \"please\",\n    \"past\": \"pleased\"\n    },\n    {\n    \"present\": \"plug\",\n    \"past\": \"plugged\"\n    },\n    {\n    \"present\": \"point\",\n    \"past\": \"pointed\"\n    },\n    {\n    \"present\": \"poke\",\n    \"past\": \"poked\"\n    },\n    {\n    \"present\": \"polish\",\n    \"past\": \"polished\"\n    },\n    {\n    \"present\": \"pop\",\n    \"past\": \"popped\"\n    },\n    {\n    \"present\": \"possess\",\n    \"past\": \"possessed\"\n    },\n    {\n    \"present\": \"post\",\n    \"past\": \"posted\"\n    },\n    {\n    \"present\": \"pour\",\n    \"past\": \"poured\"\n    },\n    {\n    \"present\": \"practise\",\n    \"past\": \"practised\"\n    },\n    {\n    \"present\": \"pray\",\n    \"past\": \"prayed\"\n    },\n    {\n    \"present\": \"preach\",\n    \"past\": \"preached\"\n    },\n    {\n    \"present\": \"precede\",\n    \"past\": \"preceded\"\n    },\n    {\n    \"present\": \"prefer\",\n    \"past\": \"preferred\"\n    },\n    {\n    \"present\": \"prepare\",\n    \"past\": \"prepared\"\n    },\n    {\n    \"present\": \"present\",\n    \"past\": \"presented\"\n    },\n    {\n    \"present\": \"preserve\",\n    \"past\": \"preserved\"\n    },\n    {\n    \"present\": \"press\",\n    \"past\": \"pressed\"\n    },\n    {\n    \"present\": \"pretend\",\n    \"past\": \"pretended\"\n    },\n    {\n    \"present\": \"prevent\",\n    \"past\": \"prevented\"\n    },\n    {\n    \"present\": \"prick\",\n    \"past\": \"pricked\"\n    },\n    {\n    \"present\": \"print\",\n    \"past\": \"printed\"\n    },\n    {\n    \"present\": \"produce\",\n    \"past\": \"produced\"\n    },\n    {\n    \"present\": \"program\",\n    \"past\": \"programmed\"\n    },\n    {\n    \"present\": \"promise\",\n    \"past\": \"promised\"\n    },\n    {\n    \"present\": \"protect\",\n    \"past\": \"protected\"\n    },\n    {\n    \"present\": \"provide\",\n    \"past\": \"provided\"\n    },\n    {\n    \"present\": \"pull\",\n    \"past\": \"pulled\"\n    },\n    {\n    \"present\": \"pump\",\n    \"past\": \"pumped\"\n    },\n    {\n    \"present\": \"punch\",\n    \"past\": \"punched\"\n    },\n    {\n    \"present\": \"puncture\",\n    \"past\": \"punctured\"\n    },\n    {\n    \"present\": \"punish\",\n    \"past\": \"punished\"\n    },\n    {\n    \"present\": \"push\",\n    \"past\": \"pushed\"\n    },\n    {\n    \"present\": \"question\",\n    \"past\": \"questioned\"\n    },\n    {\n    \"present\": \"queue\",\n    \"past\": \"questioned\"\n    },\n    {\n    \"present\": \"race\",\n    \"past\": \"raced\"\n    },\n    {\n    \"present\": \"radiate\",\n    \"past\": \"radiated\"\n    },\n    {\n    \"present\": \"rain\",\n    \"past\": \"rained\"\n    },\n    {\n    \"present\": \"raise\",\n    \"past\": \"raised\"\n    },\n    {\n    \"present\": \"reach\",\n    \"past\": \"reached\"\n    },\n    {\n    \"present\": \"realise\",\n    \"past\": \"realised\"\n    },\n    {\n    \"present\": \"receive\",\n    \"past\": \"received\"\n    },\n    {\n    \"present\": \"recognise\",\n    \"past\": \"recognised\"\n    },\n    {\n    \"present\": \"record\",\n    \"past\": \"recorded\"\n    },\n    {\n    \"present\": \"reduce\",\n    \"past\": \"reduced\"\n    },\n    {\n    \"present\": \"reflect\",\n    \"past\": \"reflected\"\n    },\n    {\n    \"present\": \"refuse\",\n    \"past\": \"refused\"\n    },\n    {\n    \"present\": \"regret\",\n    \"past\": \"regretted\"\n    },\n    {\n    \"present\": \"reign\",\n    \"past\": \"reigned\"\n    },\n    {\n    \"present\": \"reject\",\n    \"past\": \"rejected\"\n    },\n    {\n    \"present\": \"rejoice\",\n    \"past\": \"rejoiced\"\n    },\n    {\n    \"present\": \"relax\",\n    \"past\": \"relaxed\"\n    },\n    {\n    \"present\": \"release\",\n    \"past\": \"released\"\n    },\n    {\n    \"present\": \"rely\",\n    \"past\": \"relied\"\n    },\n    {\n    \"present\": \"remain\",\n    \"past\": \"remained\"\n    },\n    {\n    \"present\": \"remember\",\n    \"past\": \"remembered\"\n    },\n    {\n    \"present\": \"remind\",\n    \"past\": \"reminded\"\n    },\n    {\n    \"present\": \"remove\",\n    \"past\": \"removed\"\n    },\n    {\n    \"present\": \"repair\",\n    \"past\": \"repaired\"\n    },\n    {\n    \"present\": \"repeat\",\n    \"past\": \"repeated\"\n    },\n    {\n    \"present\": \"replace\",\n    \"past\": \"replaced\"\n    },\n    {\n    \"present\": \"reply\",\n    \"past\": \"replied\"\n    },\n    {\n    \"present\": \"report\",\n    \"past\": \"reported\"\n    },\n    {\n    \"present\": \"reproduce\",\n    \"past\": \"reproduced\"\n    },\n    {\n    \"present\": \"request\",\n    \"past\": \"requested\"\n    },\n    {\n    \"present\": \"rescue\",\n    \"past\": \"rescued\"\n    },\n    {\n    \"present\": \"retire\",\n    \"past\": \"retired\"\n    },\n    {\n    \"present\": \"return\",\n    \"past\": \"returned\"\n    },\n    {\n    \"present\": \"rhyme\",\n    \"past\": \"rhyme\"\n    },\n    {\n    \"present\": \"rinse\",\n    \"past\": \"rinsed\"\n    },\n    {\n    \"present\": \"risk\",\n    \"past\": \"risked\"\n    },\n    {\n    \"present\": \"rob\",\n    \"past\": \"robbed\"\n    },\n    {\n    \"present\": \"rock\",\n    \"past\": \"rocked\"\n    },\n    {\n    \"present\": \"roll\",\n    \"past\": \"rolled\"\n    },\n    {\n    \"present\": \"rot\",\n    \"past\": \"rotted\"\n    },\n    {\n    \"present\": \"rub\",\n    \"past\": \"rubbed\"\n    },\n    {\n    \"present\": \"ruin\",\n    \"past\": \"ruined\"\n    },\n    {\n    \"present\": \"rule\",\n    \"past\": \"ruled\"\n    },\n    {\n    \"present\": \"rush\",\n    \"past\": \"rushed\"\n    },\n    {\n    \"present\": \"sack\",\n    \"past\": \"sacked\"\n    },\n    {\n    \"present\": \"sail\",\n    \"past\": \"sailed\"\n    },\n    {\n    \"present\": \"satisfy\",\n    \"past\": \"satisfied\"\n    },\n    {\n    \"present\": \"save\",\n    \"past\": \"saved\"\n    },\n    {\n    \"present\": \"saw\",\n    \"past\": \"sawed\"\n    },\n    {\n    \"present\": \"scare\",\n    \"past\": \"scared\"\n    },\n    {\n    \"present\": \"scatter\",\n    \"past\": \"scattered\"\n    },\n    {\n    \"present\": \"scold\",\n    \"past\": \"scolded\"\n    },\n    {\n    \"present\": \"scorch\",\n    \"past\": \"scorched\"\n    },\n    {\n    \"present\": \"scrape\",\n    \"past\": \"scraped\"\n    },\n    {\n    \"present\": \"scratch\",\n    \"past\": \"scratched\"\n    },\n    {\n    \"present\": \"scream\",\n    \"past\": \"screamed\"\n    },\n    {\n    \"present\": \"screw\",\n    \"past\": \"screwed\"\n    },\n    {\n    \"present\": \"scribble\",\n    \"past\": \"scribbled\"\n    },\n    {\n    \"present\": \"scrub\",\n    \"past\": \"scrubbed\"\n    },\n    {\n    \"present\": \"seal\",\n    \"past\": \"sealed\"\n    },\n    {\n    \"present\": \"search\",\n    \"past\": \"searched\"\n    },\n    {\n    \"present\": \"separate\",\n    \"past\": \"separate\"\n    },\n    {\n    \"present\": \"serve\",\n    \"past\": \"served\"\n    },\n    {\n    \"present\": \"settle\",\n    \"past\": \"settled\"\n    },\n    {\n    \"present\": \"shade\",\n    \"past\": \"shaded\"\n    },\n    {\n    \"present\": \"share\",\n    \"past\": \"shared\"\n    },\n    {\n    \"present\": \"shave\",\n    \"past\": \"shaved\"\n    },\n    {\n    \"present\": \"shelter\",\n    \"past\": \"sheltered\"\n    },\n    {\n    \"present\": \"shiver\",\n    \"past\": \"shivered\"\n    },\n    {\n    \"present\": \"shock\",\n    \"past\": \"shocked\"\n    },\n    {\n    \"present\": \"shop\",\n    \"past\": \"shopped\"\n    },\n    {\n    \"present\": \"shrug\",\n    \"past\": \"shrugged\"\n    },\n    {\n    \"present\": \"sigh\",\n    \"past\": \"sighed\"\n    },\n    {\n    \"present\": \"sign\",\n    \"past\": \"signed\"\n    },\n    {\n    \"present\": \"signal\",\n    \"past\": \"signalled\"\n    },\n    {\n    \"present\": \"sin\",\n    \"past\": \"sinned\"\n    },\n    {\n    \"present\": \"sip\",\n    \"past\": \"sipped\"\n    },\n    {\n    \"present\": \"ski\",\n    \"past\": \"skied\"\n    },\n    {\n    \"present\": \"skip\",\n    \"past\": \"skipped\"\n    },\n    {\n    \"present\": \"slap\",\n    \"past\": \"slapped\"\n    },\n    {\n    \"present\": \"slip\",\n    \"past\": \"slipped\"\n    },\n    {\n    \"present\": \"slow\",\n    \"past\": \"slowed\"\n    },\n    {\n    \"present\": \"smash\",\n    \"past\": \"smashed\"\n    },\n    {\n    \"present\": \"smell\",\n    \"past\": \"smelled\"\n    },\n    {\n    \"present\": \"smile\",\n    \"past\": \"smiled\"\n    },\n    {\n    \"present\": \"smoke\",\n    \"past\": \"smoked\"\n    },\n    {\n    \"present\": \"snatch\",\n    \"past\": \"snatched\"\n    },\n    {\n    \"present\": \"sneeze\",\n    \"past\": \"sneezed\"\n    },\n    {\n    \"present\": \"sniff\",\n    \"past\": \"sniffed\"\n    },\n    {\n    \"present\": \"snore\",\n    \"past\": \"snored\"\n    },\n    {\n    \"present\": \"snow\",\n    \"past\": \"snowed\"\n    },\n    {\n    \"present\": \"soak\",\n    \"past\": \"soaked\"\n    },\n    {\n    \"present\": \"soothe\",\n    \"past\": \"soothed\"\n    },\n    {\n    \"present\": \"sound\",\n    \"past\": \"sounded\"\n    },\n    {\n    \"present\": \"spare\",\n    \"past\": \"spared\"\n    },\n    {\n    \"present\": \"spark\",\n    \"past\": \"sparked\"\n    },\n    {\n    \"present\": \"sparkle\",\n    \"past\": \"sparkled\"\n    },\n    {\n    \"present\": \"spell\",\n    \"past\": \"spelled\"\n    },\n    {\n    \"present\": \"spill\",\n    \"past\": \"spilled\"\n    },\n    {\n    \"present\": \"spoil\",\n    \"past\": \"spoiled\"\n    },\n    {\n    \"present\": \"spot\",\n    \"past\": \"spotted\"\n    },\n    {\n    \"present\": \"spray\",\n    \"past\": \"sprayed\"\n    },\n    {\n    \"present\": \"sprout\",\n    \"past\": \"sprouted\"\n    },\n    {\n    \"present\": \"squash\",\n    \"past\": \"squashed\"\n    },\n    {\n    \"present\": \"squeak\",\n    \"past\": \"squeaked\"\n    },\n    {\n    \"present\": \"squeal\",\n    \"past\": \"squealed\"\n    },\n    {\n    \"present\": \"squeeze\",\n    \"past\": \"squeezed\"\n    },\n    {\n    \"present\": \"stain\",\n    \"past\": \"stained\"\n    },\n    {\n    \"present\": \"stamp\",\n    \"past\": \"stamped\"\n    },\n    {\n    \"present\": \"stare\",\n    \"past\": \"stared\"\n    },\n    {\n    \"present\": \"start\",\n    \"past\": \"started\"\n    },\n    {\n    \"present\": \"stay\",\n    \"past\": \"stayed\"\n    },\n    {\n    \"present\": \"steer\",\n    \"past\": \"steered\"\n    },\n    {\n    \"present\": \"step\",\n    \"past\": \"stepped\"\n    },\n    {\n    \"present\": \"stir\",\n    \"past\": \"stirred\"\n    },\n    {\n    \"present\": \"stitch\",\n    \"past\": \"stitched\"\n    },\n    {\n    \"present\": \"stop\",\n    \"past\": \"stopped\"\n    },\n    {\n    \"present\": \"store\",\n    \"past\": \"stored\"\n    },\n    {\n    \"present\": \"strap\",\n    \"past\": \"strapped\"\n    },\n    {\n    \"present\": \"strengthen\",\n    \"past\": \"strengthened\"\n    },\n    {\n    \"present\": \"stretch\",\n    \"past\": \"stretched\"\n    },\n    {\n    \"present\": \"strip\",\n    \"past\": \"stripped\"\n    },\n    {\n    \"present\": \"stroke\",\n    \"past\": \"stroked\"\n    },\n    {\n    \"present\": \"stuff\",\n    \"past\": \"stuffed\"\n    },\n    {\n    \"present\": \"subtract\",\n    \"past\": \"subtracted\"\n    },\n    {\n    \"present\": \"succeed\",\n    \"past\": \"succeeded\"\n    },\n    {\n    \"present\": \"suck\",\n    \"past\": \"sucked\"\n    },\n    {\n    \"present\": \"suffer\",\n    \"past\": \"suffered\"\n    },\n    {\n    \"present\": \"suggest\",\n    \"past\": \"suggested\"\n    },\n    {\n    \"present\": \"suit\",\n    \"past\": \"suited\"\n    },\n    {\n    \"present\": \"supply\",\n    \"past\": \"supplied\"\n    },\n    {\n    \"present\": \"support\",\n    \"past\": \"supported\"\n    },\n    {\n    \"present\": \"suppose\",\n    \"past\": \"supposed\"\n    },\n    {\n    \"present\": \"surprise\",\n    \"past\": \"surprised\"\n    },\n    {\n    \"present\": \"surround\",\n    \"past\": \"surrounded\"\n    },\n    {\n    \"present\": \"suspect\",\n    \"past\": \"suspected\"\n    },\n    {\n    \"present\": \"suspend\",\n    \"past\": \"suspended\"\n    },\n    {\n    \"present\": \"switch\",\n    \"past\": \"switched\"\n    },\n    {\n    \"present\": \"talk\",\n    \"past\": \"talked\"\n    },\n    {\n    \"present\": \"tame\",\n    \"past\": \"tamed\"\n    },\n    {\n    \"present\": \"tap\",\n    \"past\": \"tapped\"\n    },\n    {\n    \"present\": \"taste\",\n    \"past\": \"tasted\"\n    },\n    {\n    \"present\": \"tease\",\n    \"past\": \"teased\"\n    },\n    {\n    \"present\": \"telephone\",\n    \"past\": \"telephoned\"\n    },\n    {\n    \"present\": \"tempt\",\n    \"past\": \"tempted\"\n    },\n    {\n    \"present\": \"terrify\",\n    \"past\": \"terrified\"\n    },\n    {\n    \"present\": \"test\",\n    \"past\": \"tested\"\n    },\n    {\n    \"present\": \"thank\",\n    \"past\": \"thanked\"\n    },\n    {\n    \"present\": \"thaw\",\n    \"past\": \"thawed\"\n    },\n    {\n    \"present\": \"tick\",\n    \"past\": \"ticked\"\n    },\n    {\n    \"present\": \"tickle\",\n    \"past\": \"tickled\"\n    },\n    {\n    \"present\": \"tie\",\n    \"past\": \"tied\"\n    },\n    {\n    \"present\": \"time\",\n    \"past\": \"timed\"\n    },\n    {\n    \"present\": \"tip\",\n    \"past\": \"tipped\"\n    },\n    {\n    \"present\": \"tire\",\n    \"past\": \"tired\"\n    },\n    {\n    \"present\": \"touch\",\n    \"past\": \"touched\"\n    },\n    {\n    \"present\": \"tour\",\n    \"past\": \"toured\"\n    },\n    {\n    \"present\": \"tow\",\n    \"past\": \"towed\"\n    },\n    {\n    \"present\": \"trace\",\n    \"past\": \"traced\"\n    },\n    {\n    \"present\": \"trade\",\n    \"past\": \"traded\"\n    },\n    {\n    \"present\": \"train\",\n    \"past\": \"trained\"\n    },\n    {\n    \"present\": \"transport\",\n    \"past\": \"transported\"\n    },\n    {\n    \"present\": \"trap\",\n    \"past\": \"trapped\"\n    },\n    {\n    \"present\": \"travel\",\n    \"past\": \"travelled\"\n    },\n    {\n    \"present\": \"treat\",\n    \"past\": \"treated\"\n    },\n    {\n    \"present\": \"tremble\",\n    \"past\": \"trembled\"\n    },\n    {\n    \"present\": \"trick\",\n    \"past\": \"tricked\"\n    },\n    {\n    \"present\": \"trip\",\n    \"past\": \"tripped\"\n    },\n    {\n    \"present\": \"trot\",\n    \"past\": \"trotted\"\n    },\n    {\n    \"present\": \"trouble\",\n    \"past\": \"troubled\"\n    },\n    {\n    \"present\": \"trust\",\n    \"past\": \"trusted\"\n    },\n    {\n    \"present\": \"try\",\n    \"past\": \"tried\"\n    },\n    {\n    \"present\": \"tug\",\n    \"past\": \"tugged\"\n    },\n    {\n    \"present\": \"tumble\",\n    \"past\": \"tumbled\"\n    },\n    {\n    \"present\": \"turn\",\n    \"past\": \"turned\"\n    },\n    {\n    \"present\": \"twist\",\n    \"past\": \"twisted\"\n    },\n    {\n    \"present\": \"type\",\n    \"past\": \"typed\"\n    },\n    {\n    \"present\": \"undress\",\n    \"past\": \"undressed\"\n    },\n    {\n    \"present\": \"unfasten\",\n    \"past\": \"unfastened\"\n    },\n    {\n    \"present\": \"unite\",\n    \"past\": \"united\"\n    },\n    {\n    \"present\": \"unlock\",\n    \"past\": \"unlocked\"\n    },\n    {\n    \"present\": \"unpack\",\n    \"past\": \"unpacked\"\n    },\n    {\n    \"present\": \"untidy\",\n    \"past\": \"untidied\"\n    },\n    {\n    \"present\": \"use\",\n    \"past\": \"used\"\n    },\n    {\n    \"present\": \"vanish\",\n    \"past\": \"vanished\"\n    },\n    {\n    \"present\": \"visit\",\n    \"past\": \"visited\"\n    },\n    {\n    \"present\": \"wail\",\n    \"past\": \"wailed\"\n    },\n    {\n    \"present\": \"wait\",\n    \"past\": \"waited\"\n    },\n    {\n    \"present\": \"walk\",\n    \"past\": \"walked\"\n    },\n    {\n    \"present\": \"wander\",\n    \"past\": \"wandered\"\n    },\n    {\n    \"present\": \"want\",\n    \"past\": \"wanted\"\n    },\n    {\n    \"present\": \"warm\",\n    \"past\": \"warmed\"\n    },\n    {\n    \"present\": \"warn\",\n    \"past\": \"warned\"\n    },\n    {\n    \"present\": \"wash\",\n    \"past\": \"washed\"\n    },\n    {\n    \"present\": \"waste\",\n    \"past\": \"wasted\"\n    },\n    {\n    \"present\": \"watch\",\n    \"past\": \"watched\"\n    },\n    {\n    \"present\": \"water\",\n    \"past\": \"watered\"\n    },\n    {\n    \"present\": \"wave\",\n    \"past\": \"waved\"\n    },\n    {\n    \"present\": \"weigh\",\n    \"past\": \"weighed\"\n    },\n    {\n    \"present\": \"welcome\",\n    \"past\": \"welcomed\"\n    },\n    {\n    \"present\": \"whine\",\n    \"past\": \"whined\"\n    },\n    {\n    \"present\": \"whip\",\n    \"past\": \"whipped\"\n    },\n    {\n    \"present\": \"whirl\",\n    \"past\": \"whirled\"\n    },\n    {\n    \"present\": \"whisper\",\n    \"past\": \"whispered\"\n    },\n    {\n    \"present\": \"whistle\",\n    \"past\": \"whistled\"\n    },\n    {\n    \"present\": \"wink\",\n    \"past\": \"winked\"\n    },\n    {\n    \"present\": \"wipe\",\n    \"past\": \"wiped\"\n    },\n    {\n    \"present\": \"wish\",\n    \"past\": \"wished\"\n    },\n    {\n    \"present\": \"wobble\",\n    \"past\": \"wobbled\"\n    },\n    {\n    \"present\": \"wonder\",\n    \"past\": \"wondered\"\n    },\n    {\n    \"present\": \"work\",\n    \"past\": \"worked\"\n    },\n    {\n    \"present\": \"worry\",\n    \"past\": \"worried\"\n    },\n    {\n    \"present\": \"wrap\",\n    \"past\": \"wrapped\"\n    },\n    {\n    \"present\": \"wreck\",\n    \"past\": \"wrecked\"\n    },\n    {\n    \"present\": \"wrestle\",\n    \"past\": \"wrestled\"\n    },\n    {\n    \"present\": \"wriggle\",\n    \"past\": \"wriggled\"\n    },\n    {\n    \"present\": \"x-ray\",\n    \"past\": \"x-rayed\"\n    },\n    {\n    \"present\": \"yawn\",\n    \"past\": \"yawned\"\n    },\n    {\n    \"present\": \"yell\",\n    \"past\": \"yelled\"\n    },\n    {\n    \"present\": \"zip\",\n    \"past\": \"zipped\"\n    },\n    {\n    \"present\": \"zoom\",\n    \"past\": \"zoomed\"\n    }\n  ];\n  return verbs[Math.floor(Math.random() * verbs.length)].present;\n}\nexport default verb;","// from moodlist.net via Tom Whitwell\n// returns string of two randomly picked moods\n\nfunction mood(){\n  var moods = [\n    'Accepted',\n    'Accomplished',\n    'Aggravated',\n    'Alone',\n    'Amused',\n    'Angry',\n    'Annoyed',\n    'Anxious',\n    'Apathetic',\n    'Apologetic',\n    'Ashamed',\n    'Awake',\n    'Bewildered',\n    'Bitchy',\n    'Bittersweet',\n    'Blah',\n    'Blank',\n    'Blissful',\n    'Bored',\n    'Bouncy',\n    'Brooding',\n    'Calm',\n    'Cautious',\n    'Chaotic',\n    'Cheerful',\n    'Chilled',\n    'Chipper',\n    'Cold',\n    'Complacent',\n    'Confused',\n    'Content',\n    'Cranky',\n    'Crappy',\n    'Crazy',\n    'Crushed',\n    'Curious',\n    'Cynical',\n    'Dark',\n    'Defensive',\n    'Delusional',\n    'Demented',\n    'Depressed',\n    'Determined',\n    'Devious',\n    'Dirty',\n    'Disappointed',\n    'Discontent',\n    'Ditzy',\n    'Dorky',\n    'Drained',\n    'Drunk',\n    'Ecstatic',\n    'Energetic',\n    'Enraged',\n    'Enthralled',\n    'Envious',\n    'Exanimate',\n    'Excited',\n    'Exhausted',\n    'Fearful',\n    'Flirty',\n    'Forgetful',\n    'Frustrated',\n    'Full',\n    'Geeky',\n    'Giddy',\n    'Giggly',\n    'Gloomy',\n    'Good',\n    'Grateful',\n    'Groggy',\n    'Grumpy',\n    'Guilty',\n    'Happy',\n    'Heartbroken',\n    'High',\n    'Hopeful',\n    'Hot',\n    'Hungry',\n    'Hyper',\n    'Impressed',\n    'Indescribable',\n    'Indifferent',\n    'Infuriated',\n    'Irate',\n    'Irritated',\n    'Jealous',\n    'Joyful',\n    'Jubilant',\n    'Lazy',\n    'Lethargic',\n    'Listless',\n    'Lonely',\n    'Loved',\n    'Mad',\n    'Melancholy',\n    'Mellow',\n    'Mischievous',\n    'Moody',\n    'Morose',\n    'Naughty',\n    'Nerdy',\n    'Numb',\n    'Okay',\n    'Optimistic',\n    'Peaceful',\n    'Pessimistic',\n    'Pissed off',\n    'Pleased',\n    'Predatory',\n    'Quixotic',\n    'Rapturous',\n    'Recumbent',\n    'Refreshed',\n    'Rejected',\n    'Rejuvenated',\n    'Relaxed',\n    'Relieved',\n    'Restless',\n    'Rushed',\n    'Sad',\n    'Satisfied',\n    'Shocked',\n    'Sick',\n    'Silly',\n    'Sleepy',\n    'Smart',\n    'Stressed',\n    'Surprised',\n    'Sympathetic',\n    'Thankful',\n    'Tired',\n    'Touched',\n    'Uncomfortable',\n    'Weird'\n  ];\n  var output = []\n  output.push(moods.splice(Math.floor(Math.random() * moods.length), 1))\n  output.push(moods.splice(Math.floor(Math.random() * moods.length), 1))\n  return output.join(\", \");\n}\n\nexport default mood;","// Source: https://www.ef.com/wwen/english-resources/english-idioms/\n\nfunction idiom(){\n  var idioms = [\"A blessing in disguise\",\"A dime a dozen\",\"Beat around the bush\",\"Better late than never\",\"Bite the bullet\",\"Break a leg\",\"Call it a day\",\"Cut somebody some slack\",\"Cutting corners\",\"Easy does it\",\"Get out of hand\",\"Get something out of your system\",\"Get your act together\",\"Give someone the benefit of the doubt\",\"Go back to the drawing board\",\"Hang in there\",\"Hit the sack\",\"It's not rocket science\",\"Let someone off the hook\",\"Make a long story short\",\"Miss the boat\",\"No pain, no gain\",\"On the ball\",\"Pull someone's leg\",\"Pull yourself together\",\"So far so good\",\"Speak of the devil\",\"That's the last straw\",\"The best of both worlds\",\"Time flies when you're having fun\",\"To get bent out of shape\",\"To make matters worse\",\"Under the weather\",\"We'll cross that bridge when we come to it\",\"Wrap your head around something\",\"You can say that again\",\"Your guess is as good as mine\",\"A bird in the hand is worth two in the bush\",\"A penny for your thoughts\",\"A penny saved is a penny earned\",\"A perfect storm\",\"A picture is worth 1000 words\",\"Actions speak louder than words\",\"Add insult to injury\",\"Barking up the wrong tree\",\"Birds of a feather flock together\",\"Bite off more than you can chew\",\"Break the ice\",\"By the skin of your teeth\",\"Comparing apples to oranges\",\"Costs an arm and a leg\",\"Do something at the drop of a hat\",\"Do unto others as you would have them do unto you\",\"Don't count your chickens before they hatch\",\"Don't cry over spilt milk\",\"Don't give up your day job\",\"Don't put all your eggs in one basket\",\"Every cloud has a silver lining\",\"Get a taste of your own medicine\",\"Give someone the cold shoulder\",\"Go on a wild goose chase\",\"Good things come to those who wait\",\"He has bigger fish to fry\",\"He's a chip off the old block\",\"Hit the nail on the head\",\"Ignorance is bliss\",\"It ain't over till the fat lady sings\",\"It takes one to know one\",\"It's a piece of cake\",\"It's raining cats and dogs\",\"Kill two birds with one stone\",\"Let the cat out of the bag\",\"Live and learn\",\"Look before you leap\",\"On thin ice\",\"Once in a blue moon\",\"Play devil's advocate\",\"Put something on ice\",\"Rain on someone's parade\",\"Saving for a rainy day\",\"Slow and steady wins the race\",\"Spill the beans\",\"Take a rain check\",\"Take it with a grain of salt\",\"The ball is in your court\",\"The best thing since sliced bread\",\"The devil is in the details\",\"The early bird gets the worm\",\"The elephant in the room\",\"The whole nine yards\",\"There are other fish in the sea\",\"There's a method to his madness\",\"There's no such thing as a free lunch\",\"Throw caution to the wind\",\"You can't have your cake and eat it too\",\"You can't judge a book by its cover\",\"A little learning is a dangerous thing\",\"A snowball effect\",\"A snowball's chance in hell\",\"A stitch in time saves nine\",\"A storm in a teacup\",\"An apple a day keeps the doctor away\",\"An ounce of prevention is worth a pound of cure\",\"As right as rain\",\"Bolt from the blue\",\"Burn bridges\",\"Calm before the storm\",\"Come rain or shine\",\"Curiosity killed the cat\",\"Cut the mustard\",\"Don't beat a dead horse\",\"Every dog has his day\",\"Familiarity breeds contempt\",\"Fit as a fiddle\",\"Fortune favours the bold\",\"Get a second wind\",\"Get wind of something\",\"Go down in flames\",\"Haste makes waste\",\"Have your head in the clouds\",\"He who laughs last laughs loudest\",\"Hear something straight from the horse's mouth\",\"He's not playing with a full deck\",\"He's off his rocker\",\"He's sitting on the fence\",\"It is a poor workman who blames his tools\",\"It is always darkest before the dawn\",\"It takes two to tango\",\"Jump on the bandwagon\",\"Know which way the wind is blowing\",\"Leave no stone unturned\",\"Let sleeping dogs lie\",\"Like riding a bicycle\",\"Like two peas in a pod\",\"Make hay while the sun shines\",\"On cloud nine\",\"Once bitten, twice shy\",\"Out of the frying pan and into the fire\",\"Run like the wind\",\"Shape up or ship out\",\"Snowed under\",\"That ship has sailed\",\"The pot calling the kettle black\",\"There are clouds on the horizon\",\"Those who live in glass houses shouldn't throw stones\",\"Through thick and thin\",\"Time is money\",\"Waste not, want not\",\"We see eye to eye\",\"Weather the storm\",\"Well begun is half done\",\"When it rains it pours\",\"You can catch more flies with honey than you can with vinegar\",\"You can lead a horse to water, but you can't make him drink\",\"You can't make an omelet without breaking some eggs\"];\n  return idioms[Math.floor(Math.random() * idioms.length)];\n}\n\nexport default idiom;","// source: https://github.com/dariusk/corpora/\n\nfunction drunkenness(){\n  var states_of_drunkenness = [\n    \"drunk\",\n    \"hammered\",\n    \"intoxicated\",\n    \"impaired\",\n    \"stinko\",\n    \"wrecked\",\n    \"pissed\",\n    \"blotto\",\n    \"sloshed\",\n    \"buzzed\",\n    \"tight\",\n    \"canned\",\n    \"baked\",\n    \"thrashed\",\n    \"trashed\",\n    \"tipsy\",\n    \"smashed\",\n    \"totaled\",\n    \"tore up\",\n    \"gone\",\n    \"soused\",\n    \"thirsty\",\n    \"annihilated\",\n    \"blitzed\",\n    \"stoned\",\n    \"lit\",\n    \"plastered\",\n    \"three sheets to the wind\",\n    \"tanked\",\n    \"delerious\",\n    \"friendly\",\n    \"disorderly\",\n    \"rowdy\",\n    \"stewed\"\n  ];\n  return states_of_drunkenness[Math.floor(Math.random() * states_of_drunkenness.length)];\n}\n\nexport default drunkenness;","\nfunction chordSequence(){\n  const progressions = [\n   \"1 4 6 5\",\n   \"1 4 5 4\",\n   \"6 6 5 5\",\n   \"4 5 1 1\",\n   \"4 4 3 3\",\n   \"1 4 5 5\",\n   \"4 5 6 6\",\n   \"1 1 2 2\",\n  ];\n  return progressions[Math.floor(Math.random() * progressions.length)].split(' ');\n}\n\nexport default chordSequence;","// comments for sections\n\nimport Chance from 'chance';\nimport verb from './verb';\nimport mood from './mood';\nimport idiom from './idiom';\nimport drunkenness from './drunkenness';\nimport chordSequence from './chordSequence';\nimport { Key } from \"@tonaljs/tonal\";\n\nvar chance = new Chance();\nvar capitalize = require('capitalize');\nvar Sentencer = require('sentencer');\n\nclass Song{\n  constructor(){\n    this.artist = artist();\n    this.title = title();\n    this.tempo = tempo();\n    this.mood = mood().toLowerCase();\n    this.minor = minor();\n    this.guitar = guitar();\n    this.keys = keys();\n    this.bass = bass();\n    this.drums = drums();\n    this.minorness = randomElement([\"natural\"]); // removed the others for now\n    this.key = this.minor ? Key.minorKey(key()) : Key.majorKey(key());\n    this.buildSong();\n  }\n  newChordSequence(){\n    var key // = this.minor ? this.key[this.minorness] : this.key\n    if (this.minor) {\n      key = this.key[this.minorness]\n    } else {\n      key = this.key\n    }\n    return chordSequence().map((degree)=>{\n      var index = parseInt(degree) - 1;\n      var note = key.scale[index];\n      var chord = key.chords[index].split(note)[1];\n      var quality = {\n        \"7\": \"\",\n        \"m7\": \"m\",\n        \"maj7\": \"\",\n        \"m7b5\": \"ø\"\n      }[chord]\n      return note + quality;\n    }); \n  }\n  buildSong(){\n    var verse = this.newChordSequence();\n    var chorus = this.newChordSequence();\n    var middle = this.newChordSequence();\n    if (Math.random() < 0.1) {\n      // verse and chorus are the same\n      chorus = verse;\n    }\n    var chorusComment = chance.weighted(\n      [\"more hi-hats\", \"another guitar part\", \"another keyboard part\", \"add handclaps\", \"bass gets busier\"], \n      [0.2, 0.2, 0.2, 0.2, 0.2]\n    );\n\n    var tree = {\n      'Intro': {\n        'comment': {\n          0.25: \"just drums\",\n          // 0.25: \"no drums\", // will that work?\n          0.25: \"just bass\",\n          0.25: \"just chords\",\n          0.25: \"no bass\"\n        },\n        'chords': {\n          0.1: [],\n          0.4: verse,\n          0.4: chorus,\n          // just first chord!\n          0.1: [verse[0], verse[0], verse[0], verse[0]] \n        }\n      },\n      'Verse 1': {\n        'chords': {\n          1: verse\n        },\n        'comment': {\n          0.1: \"no bass until the chorus\"\n        }\n      },\n      'Chorus 1': {\n        chords: {\n          1: chorus\n        },\n        comment: {\n          1: chorusComment \n        }\n      },\n      'Verse 2': {\n        chords: {\n          1: verse\n        },\n        comment: {\n          0.25: \"drums and bass drop out for a few bars\",\n          0.25: \"half as long as first verse\",\n          0.5: \"\"\n        }\n      },\n      'Chorus 2': {\n        chords: {\n          1: chorus\n        },\n        comment: {\n          0.7: chorusComment,\n          0.3: \"twice as long as the first chorus\"\n        }\n      },\n      'Middle': {\n        chords: {\n          0.25: chorus,\n          0.25: middle,\n          0.5: verse\n        },\n        comment: {\n          0.25: \"drums and bass drop out and gradually build up\",\n          0.25: \"some other instrument plays vocal melody\",\n          0.25: \"slightly different groove to the rest of the song\",\n          0.25: \"bass drops out\"\n        }\n      },\n      'Last Chorus': {\n        chords: {\n          1: chorus\n        },\n        comment: {\n          0.4: chorusComment,\n          0.6: \"twice as long as the first chorus\",\n\n        }\n      }\n    }\n\n    this.structure = [];\n    for (var section in tree){\n      var newSection = {name: section};\n      for (var key in tree[section]){\n        console.log(section, key, Object.keys(tree[section][key]))\n        newSection[key] = chance.weighted(\n          Object.values(tree[section][key]),\n          Object.keys(tree[section][key]).map(parseFloat)\n        )\n      }\n      this.structure.push(newSection)\n    }\n  }\n  details(){\n    return [\n      // {name: \"Artist\", value: this.artist},\n      // {name: \"Title\", value: this.title},\n      {name: \"Tempo\", value: this.tempo},\n      {name: \"Key\", value: this.key.tonic + \" \" + this.key.type},\n      {name: \"Mood\", value: this.mood},\n      {name: \"Guitar\", value: this.guitar},\n      {name: \"Keys\", value: this.keys},\n      {name: \"Bass\", value: this.bass},\n      {name: \"Drums\", value: this.drums},\n    ]\n  }\n}\n\nfunction artist(allowFeat=true){\n  var a = randomElement([\n    chance.word(),\n    chance.first() + \" \" + chance.animal(),\n    chance.name(),\n    chance.prefix() + \" \" + Sentencer.make(\"{{ noun }}\"),\n    chance.first() + \" \" + Sentencer.make(\"the {{ noun }}\"),\n    verb() + Sentencer.make(\" the {{ noun }}\"),\n    Sentencer.make(\"the {{ noun }}\"),\n    Sentencer.make(\"the {{ nouns }}\"),\n  ])\n  a = capitalise(a)\n  if (allowFeat && Math.random() < 0.15) {\n    a += \" feat. \" + artist(false)\n  }\n  return a;\n}\n\nfunction title(){\n  var t = randomElement([\n    idiom(),\n    drunkenness(),\n    Sentencer.make(\"the {{ noun }}\"),\n    verb(),\n    verb() + \" \" + chance.first(),\n    chance.first()\n  ]);\n  return capitalise(t);\n}\n\nfunction tempo(){\n  return chance.integer({ min: 60, max: 130 }) + \"BPM\"\n}\n\nfunction minor(){\n  return Math.random() <= 0.3;\n}\n\nfunction key(){\n  var k = randomElement(\"C Db D Eb E F Gb G Ab A Bb B\".split(' '));\n  return k;\n}\n\nfunction drums(){\n  return randomElement([\n    \"drum kit (distorted)\",\n    \"drum kit (Rock beat #1)\",\n    \"drum kit (roomy, Wall of Sound-ish)\",\n    \"CR-78 presets\",\n    \"808 (trappy)\",\n    \"808 (80s RnB)\",\n    \"909 (Techno)\",\n    \"just claps\",\n    \"drum kit (Off the Wall-ish)\",\n    \"classic hip-hop break\",\n    \"Amen break\",\n    \"none\",\n  ]);\n}\n\nfunction bass(){\n  return randomElement([\n    \"electric, incongruous slapping\",\n    \"electric, picked 8th note all downstrokes\",\n    \"electric, picked, Wrecking Crew-esque\",\n    \"electric, long notes, change when the chord does\",\n    \"electric, what the kick drum's doing\",\n    \"electric, dubby\",\n    \"electric, Motown\",\n    \"synth, sine wave long notes\",\n    \"synth, detuned, many oscillators, long notes\",\n    \"synth, acid\",\n    \"synth, 16th notes sequenced\",\n    \"none\"\n  ])\n}\n\nfunction guitar(){\n  return randomElement([\n    \"Nile Rogers-ish\",\n    \"The Edge-ish\",\n    \"palm muted power chords\",\n    \"acoustic: strumming\",\n    \"electric: slacker strumming\",\n    \"electric: clean verse, distorted chorus\",\n    \"reggae offbeats\",\n    \"same as the bass line\",\n    \"long chords\",\n    \"afrobeat-ish arpeggios\",\n    \"lapsteel\",\n    \"none\"\n  ])\n}\n\n// separate sound from part\nfunction keys(){\n  return randomElement([\n    \"Juno pads\",\n    \"organ pads\",\n    \"electric piano\",\n    \"Mellotron strings\",\n    \"arpeggiated\",\n    \"piano (long chords)\",\n    \"piano (ravey)\",\n    \"piano (reggae offbeats)\",\n    \"felted piano\",\n    \"none\"\n  ])\n}\n\n// Utility functions\n\nfunction capitalise(string){\n  return capitalize.words(string);\n}\n\nfunction randomElement(arr){\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport default Song;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Song from './Song';\n\nclass HitMachine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.randomise = this.randomise.bind(this);\n    this.state = {\n      song: new Song()\n    };\n  }\n  componentDidMount() {\n    document.title = 'Hit Machine'\n  }\n  randomise(){\n    this.setState({\n      song: new Song()\n    });\n  }\n  comment(text){\n    return <span className=\"sectionComment\">({text})</span>\n  }\n  render() {\n    return (\n      <div className=\"HitMachine\">\n        <h1>{this.state.song.artist} – {this.state.song.title}</h1>\n        { this.state.song.details().map ((detail, idx) => \n          <div className=\"songDetail\" key={idx}>\n          <h3>{detail.name} <span style={{fontWeight: 400}}>{detail.value}</span></h3>\n          </div>\n        )}\n\n        { this.state.song.structure.map((section, idx) =>\n          <div className=\"section\" key={idx}>\n          <h3 className=\"sectionHeading\">{section.name}\n          { section.comment.length > 0 ? this.comment(section.comment) : \"\" }\n          </h3>\n          <p className=\"chordRow\"> | \n          { section.chords.map((chord, idx) =>\n            <span key={idx}> {chord} |</span>\n          )}\n          </p>\n          </div>\n        )}\n\n        <Button variant=\"contained\" \n          onClick={ this.randomise }\n          color=\"primary\">\n          Randomise\n        </Button>\n\n      </div>\n    );\n  }\n}\n\nexport default HitMachine;\n","import React from 'react';\nimport HitMachine from './HitMachine';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Hit Machine\n        <div className=\"App-description\">a random song idea generator</div>\n      </header>\n      <HitMachine />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}